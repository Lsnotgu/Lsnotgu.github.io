<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Probability on Another archive</title>
    <link>https://lsnotgu.github.io/blog/probability/</link>
    <description>Recent content in Probability on Another archive</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, icee.</copyright>
    <lastBuildDate>Mon, 19 Aug 2024 21:30:51 +0800</lastBuildDate>
    <atom:link href="https://lsnotgu.github.io/blog/probability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一维随机变量</title>
      <link>https://lsnotgu.github.io/%E4%B8%80%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 19 Aug 2024 21:30:51 +0800</pubDate>
      <guid>https://lsnotgu.github.io/%E4%B8%80%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</guid>
      <description>1 什么是随机变量 随机变量的本质就是函数。和一般的函数不同，随机变量是事件到函数值的映射。为了更明确这一点，我们以最简单的掷骰子为例，一颗公平6面筛的投掷结果得到1~6点的几率是相等的。设随机变量$X$，那么，我们可以定义：&#xD;$$&#xD;\begin{gather*}&#xD;X(投掷结果为1)=1&#xD;\\&#xD;X(投掷结果为2)=2&#xD;\\&#xD;...&#xD;\\&#xD;X(投掷结果为6)=6&#xD;\end{gather*}&#xD;$$&#xD;而为了简单起见，我们把上述内容简写为$X=1,X=2,...,X=6$等。而现在我们就可以把概率和随机变量联系在一起了。令随机变量$Y$表示：骰子投掷结果到几率的映射(注意这里$Y$也是函数)，那么我们可以套用复合函数的概念：&#xD;$$&#xD;Y(X=1)=\frac{1}{6}&#xD;$$&#xD;就表示：投掷结果为1($X=1$)的概率为$\frac{1}{6}$($Y(X=1)=\frac{1}{6}$)。&#xA;下面先来看一下随机变量的正式定义：&#xA;设$S$为样本空间，对于每一个随机试验的结果$e\in S$都有唯一的实数与它对应，得到一个定义在$S$上的单值函数$X=X(e)(e\in S)$就成为随机变量。&#xA;从这个定义中我们可以看出，随机变量和普通函数最大的区别在于，随机变量是定义在样本空间上的，而样本空间是由随机试验结果的描述所构成的。&#xA;引入随机变量的重要意义在于，我们把对事件概率的研究，抽象成为了对随机变量的研究。这有利于我们识别某一类具有共性的事件的发生规律。在下文的各种概率分布中，会更深刻的体会到这一点。&#xA;2 离散型随机变量 2.1 二项分布 二项分布$X\sim Binomial(n,p)$所要抽象出的是这么一种情况：&#xA;条件：1. 每次试验都是独立的，结果互不影响； 2. 试验的结果只有成功和失败两种。&#xA;关心的事件及概率：$n$次试验，成功$k$次的几率为$C_n^kp^k(1-p)^{n-k}$&#xA;2.2 泊松分布 2.2.1 引例：保险公司获利 保险公司推出学生意外伤害险，每位参保人需缴纳50元保费，出险时可获得2万元赔付。已知一年中的出险概率为0.15%，共有6000名学生参保。求保险公司在该意外伤害险中获利不少于6万元的概率？&#xA;首先，每个学生是否出险是独立事件，那么6000人的出险情况显然服从二项分布。设有$X$为出险的学生数量，那么： $$&#xD;\begin{gather*}&#xD;P(50\cdot 6000-20000X\ge 60000)=P(X\le12)&#xD;\\&#xD;\Rightarrow \Sigma_{k=0}^{12}C_{6000}^k0.0015^k(1-0.0015)^{6000-k}&#xD;\end{gather*}&#xD;$$ 实际计算会比较复杂，因此为了求出近似解，引入泊松分布。&#xA;2.2.2 泊松分布的推导 设事件发生的速率为每单位时间$\lambda$次，观察时间为$T$，随机变量$X$为观察时间内该事件发生的总次数。如果我们把观察的总时间$T$切分为很多个小段，每个小段的长度是$\delta_T$： 那么就会有$n=\frac{T}{\delta_T}$个小段，每一个小段事件发生的几率为$\lambda\delta_T=\frac{\lambda T}{n}$；而此时$n$个小段发生$X=x$次事件的几率服从二项分布，即$X\sim Binamal(n, \frac{\lambda T}{n})$，因此我们可以写出： $$&#xD;P_X(x)=C_n^x(\frac{\lambda T}{n})^x(1-\frac{\lambda T}{n})^{n-x}&#xD;$$ 当我们的$\delta_T$切分的足够小时，$n\rightarrow\infty$，于是上式化为： $$&#xD;\lim_{n\to\infty}\frac{n!}{(n-x)!x!}(\frac{\lambda T}{n})^x(1-\frac{\lambda T}{n})^{n-x}=\lim_{n\to\infty}\frac{n\cdot(n-1)\cdot.</description>
    </item>
    <item>
      <title>古典概型及一些经典问题</title>
      <link>https://lsnotgu.github.io/%E5%8F%A4%E5%85%B8%E6%A6%82%E5%9E%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 08 Aug 2024 21:29:42 +0800</pubDate>
      <guid>https://lsnotgu.github.io/%E5%8F%A4%E5%85%B8%E6%A6%82%E5%9E%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</guid>
      <description>最基础的一些内容 概率三公理：非负；和为1；互斥可加 古典概率：有限个+等可能 1 古典概型中的生日问题 1.1 问题的引入 2014年的巴西世界杯，共有32支球队参与。其中有16支球队的球员有同天生日的情况。如巴西队的Hulk和Paulinho，他们的生日都是7月25号。我们知道，一支完整的足球队人数为23人，那么2014年，半数球队有队员同天生日，是否是偶然的呢？&#xA;1.2 概率的角度 我们先来解决这个问题：假设每个人的生日在365天中任意一天的概率是相同的，那么23人中，至少两人的生日在同一天的概率是多少？&#xA;从问题的反面来考虑会比较容易，记事件$A$为所有人的生日都不同，那么这个事件的反面事件$B$就是至少两人的生日在同一天。我们所要求的就是： $$&#xD;P(B)=1-P(A)&#xD;$$ 考察事件$A$：由于每个人的生日在一年中任何一天的概率是相同的，因此分母（所有可能的组合）为：$365^{23}$，即每个人的生日都有可能在365天中任意一天。分子为：$P_{365}^{23}$，可以这么考虑：第1个人选365天中任意一天，第2个人在剩下364天里选一天&amp;hellip;以此类推。因此，最终我们要计算的概率： $$P(B)=1-\frac{365\cdot364\cdot...\cdot(365-23+1)}{365^{23}}\approx0.507$$ 令人惊讶的是，这个概率竟然在50%左右！2014世界杯共有32支球队参加，每支球队有队员同天生日的概率大概是50%，那么计算一下期望，会发现大约有16支球队的球员存在同天生日的情况，与实际情况完全相符。&#xA;1.3 考虑$n$个人的情况 这似乎有些反直觉，现在我们考虑：$n(n \ge 2)$ 的情况，即$n$个人中，至少两人的生日在同一天。将概率式改写为函数，其自变量$n$表示人数，于是有： $$f(n)=1-\frac{P_{365}^{n}}{365^{n}}$$ 使用Python来绘制这个函数图像:&#xA;import matplotlib.pyplot as plt import math # Define the function f(n) def f(n): if n &amp;lt;= 1: return 0 else: p_a = math.perm(365, n)/(365**n) return round(1 - p_a, 5) # Generate values n_values = list(range(1,101)) f_values = [f(n) for n in n_values] # Plot f(n) plt.</description>
    </item>
  </channel>
</rss>
