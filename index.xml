<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Another Archive on Another archive</title>
    <link>https://lsnotgu.github.io/</link>
    <description>Recent content in Another Archive on Another archive</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, icee.</copyright>
    <lastBuildDate>Thu, 08 Aug 2024 21:29:42 +0800</lastBuildDate>
    <atom:link href="https://lsnotgu.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>古典概型及一些经典问题</title>
      <link>https://lsnotgu.github.io/%E5%8F%A4%E5%85%B8%E6%A6%82%E5%9E%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 08 Aug 2024 21:29:42 +0800</pubDate>
      <guid>https://lsnotgu.github.io/%E5%8F%A4%E5%85%B8%E6%A6%82%E5%9E%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/</guid>
      <description>最基础的一些内容 概率三公理：非负；和为1；互斥可加 古典概率：有限个+等可能 1 古典概型中的生日问题 1.1 问题的引入 2014年的巴西世界杯，共有32支球队参与。其中有16支球队的球员有同天生日的情况。如巴西队的Hulk和Paulinho，他们的生日都是7月25号。我们知道，一支完整的足球队人数为23人，那么2014年，半数球队有队员同天生日，是否是偶然的呢？&#xA;1.2 概率的角度 我们先来解决这个问题：假设每个人的生日在365天中任意一天的概率是相同的，那么23人中，至少两人的生日在同一天的概率是多少？&#xA;从问题的反面来考虑会比较容易，记事件$A$为所有人的生日都不同，那么这个事件的反面事件$B$就是至少两人的生日在同一天。我们所要求的就是： $$&#xD;P(B)=1-P(A)&#xD;$$ 考察事件$A$：由于每个人的生日在一年中任何一天的概率是相同的，因此分母（所有可能的组合）为：$365^{23}$，即每个人的生日都有可能在365天中任意一天。分子为：$P_{365}^{23}$，可以这么考虑：第1个人选365天中任意一天，第2个人在剩下364天里选一天&amp;hellip;以此类推。因此，最终我们要计算的概率： $$P(B)=1-\frac{365\cdot364\cdot...\cdot(365-23+1)}{365^{23}}\approx0.507$$ 令人惊讶的是，这个概率竟然在50%左右！2014世界杯共有32支球队参加，每支球队有队员同天生日的概率大概是50%，那么计算一下期望，会发现大约有16支球队的球员存在同天生日的情况，与实际情况完全相符。&#xA;1.3 考虑$n$个人的情况 这似乎有些反直觉，现在我们考虑：$n(n \ge 2)$ 的情况，即$n$个人中，至少两人的生日在同一天。将概率式改写为函数，其自变量$n$表示人数，于是有： $$f(n)=1-\frac{P_{365}^{n}}{365^{n}}$$ 使用Python来绘制这个函数图像:&#xA;import matplotlib.pyplot as plt import math # Define the function f(n) def f(n): if n &amp;lt;= 1: return 0 else: p_a = math.perm(365, n)/(365**n) return round(1 - p_a, 5) # Generate values n_values = list(range(1,101)) f_values = [f(n) for n in n_values] # Plot f(n) plt.</description>
    </item>
    <item>
      <title>在Origin中绘制Partial Dependence Plots(部分依赖图)</title>
      <link>https://lsnotgu.github.io/%E5%9C%A8origin%E4%B8%AD%E7%BB%98%E5%88%B6partial-dependence-plots%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96%E5%9B%BE/</link>
      <pubDate>Thu, 08 Aug 2024 18:41:33 +0800</pubDate>
      <guid>https://lsnotgu.github.io/%E5%9C%A8origin%E4%B8%AD%E7%BB%98%E5%88%B6partial-dependence-plots%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96%E5%9B%BE/</guid>
      <description>在Python中用来绘制PDP的库一般是sklearn或者shap，分别是:&#xA;from sklearn.inspection import PartialDependenceDisplay from shap.plots import partial_dependence 但是Python中调整输出图片的属性（如尺寸、线型、图例等）不如Origin方便，尤其是期刊对图片尺寸有要求，且我们有多张PDP要拼接时。&#xA;核心的问题就是如何取出函数的计算结果。本文以shap中的partial_dependence为例(库版本0.43.0)，通过阅读源码，找到输出图像的$x,y$数据分别是什么，之后的工作就是把这些值复制到Origin里调整图片属性即可。&#xA;可以很容易的定位到源文件_partial_dependence.py，该函数的核心参数有3个：ind(要对哪些属性进行绘制)，model(所用的模型)和data(数据)。我们假设输入数据类型pandas的Dataframe，假设target_feature是我们所关心的属性，数据表为：&#xA;f1 f2 f3 target_feature v1 v2 v3 v4 &amp;hellip; &amp;hellip; &amp;hellip; &amp;hellip; 最开始是条件判断：&#xA;if isinstance(data, Explanation): # 为假，直接执行else部分 features = data.data shap_values = data else: features = data data显然不是一个Explanation对象，因此这里单纯地把我们输入的原始数据data赋给了features。&#xA;use_dataframe = False if str(type(features)).endswith(&amp;#34;&amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&amp;#34;): # 为真，因为features是个Dataframe if feature_names is None: # 为真 feature_names = features.columns # feature_names = [&amp;#39;f1&amp;#39;, &amp;#39;f2&amp;#39;, &amp;#39;f3&amp;#39;, &amp;#39;target_feature&amp;#39;] features = features.values # 这里的features变成了numpy数组 use_dataframe = True # 这个参数后面会用到 这部分判断输入的数据类型，并把输入属性和输入的数据（数值）分离开来，分别是feature_names(属性名)和features(属性值)，注意这里的use_dataframe被设置为True，表示我们的原始输入数据是一个Dataframe，后面会用到。</description>
    </item>
    <item>
      <title>Bear</title>
      <link>https://lsnotgu.github.io/bear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lsnotgu.github.io/bear/</guid>
      <description>Bear 这是一个template页面！title表示在菜单栏上显示的内容。&#xA;menu参数表示这个页面的按钮Bear将显示在主菜单上。</description>
    </item>
  </channel>
</rss>
